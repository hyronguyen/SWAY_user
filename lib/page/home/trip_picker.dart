import 'dart:convert';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:latlong2/latlong.dart';
import 'package:sway/config/api_token.dart';
import 'package:sway/config/colors.dart';
import 'package:sway/page/home/map_picker.dart';
import 'package:sway/page/home/map_picker_des.dart';
import 'package:sway/page/home/trip_confirmation.dart';

class TripPicker extends StatefulWidget {
  @override
  _TripPickerState createState() => _TripPickerState();
}

class _TripPickerState extends State<TripPicker> {
  final TextEditingController _pickupController = TextEditingController();
  final TextEditingController _destinationController = TextEditingController();
  final String mapboxAccessToken = map_box_token;

  LatLng? pickupLocation;
  LatLng? destinationLocation;
  List<Map<String, dynamic>> _suggestions = []; // Ch·ª©a c·∫£ t√™n ƒë·ªãa ƒëi·ªÉm & t·ªça ƒë·ªô
  TextEditingController? _activeController; // L∆∞u √¥ nh·∫≠p li·ªáu ƒëang ch·ªçn

  //H√†m m·ªü map picker
  Future<void> _openMapPickerPickup() async {
    final result = await Navigator.push(
      context,
      MaterialPageRoute(builder: (context) => const MapPicker()),
    );

    if (result != null && result is Map<String, dynamic>) {
      setState(() {
        _pickupController.text = result['address'];
        pickupLocation = LatLng(
          result['latitude'] as double,
          result['longitude'] as double,
        );
      });
    }
  }

  Future<void> _openMapPickerDes() async {
    final result = await Navigator.push(
      context,
      MaterialPageRoute(builder: (context) => const MapPickerDestination()),
    );

    if (result != null && result is Map<String, dynamic>) {
      setState(() {
        _destinationController.text = result['address'];
        destinationLocation = LatLng(
          result['latitude'] as double,
          result['longitude'] as double,
        );
      });
    }
  }

  // H√†m l·∫•y g·ª£i √Ω t·ª´ Mapbox/Geocoding API
  Future<void> _getSuggestions(String query) async {
    if (query.isEmpty) return;

    final url =
        'https://api.mapbox.com/geocoding/v5/mapbox.places/${Uri.encodeComponent(query)}.json'
        '?access_token=$mapboxAccessToken&autocomplete=true&types=address,place,neighborhood,locality&country=VN';

    try {
      final response = await http.get(Uri.parse(url));
      if (response.statusCode == 200) {
        final data = json.decode(response.body);

        setState(() {
          _suggestions = (data['features'] as List).map<Map<String, dynamic>>((item) {
            return {
              'place_name': item['place_name'],
              'latitude': item['geometry']['coordinates'][1],
              'longitude': item['geometry']['coordinates'][0],
            };
          }).toList();
        });
      } else {
        debugPrint("L·ªói API Mapbox: ${response.statusCode}");
      }
    } catch (e) {
      debugPrint("L·ªói: $e");
    }
  }

  //T√¨m t√†i x·∫ø 
  Future<void> _choseAvailableDriver(LatLng userLocation) async {
    final double searchRadius = 2.0; // B√°n k√≠nh 1km
    final Distance distance = Distance(); // Th∆∞ vi·ªán t√≠nh kho·∫£ng c√°ch

    try {
      QuerySnapshot snapshot = await FirebaseFirestore.instance
          .collection('AVAILABLE_DRIVERS')
          .where('status', isEqualTo: 'available') // Ch·ªâ l·∫•y t√†i x·∫ø r·∫£nh
          .get();

      debugPrint("üî• L·∫•y danh s√°ch t√†i x·∫ø t·ª´ Firestore:");
      for (var doc in snapshot.docs) {
        debugPrint("üìå T√†i x·∫ø ID: ${doc.id} | D·ªØ li·ªáu: ${doc.data()}");
      }

      List<Map<String, dynamic>> nearbyDrivers = [];

      for (var doc in snapshot.docs) {
        double driverLat = doc['latitude'];
        double driverLng = doc['longitude'];

        LatLng driverLocation = LatLng(driverLat, driverLng);
        double kmDistance = distance.as(LengthUnit.Kilometer, userLocation, driverLocation);

        if (kmDistance <= searchRadius) {
          nearbyDrivers.add({
            'id': doc.id,
            'latitude': driverLat,
            'longitude': driverLng,
            'distance': kmDistance,
          });
        }
      }

      if (nearbyDrivers.isNotEmpty) {
        // S·∫Øp x·∫øp danh s√°ch theo kho·∫£ng c√°ch tƒÉng d·∫ßn
        nearbyDrivers.sort((a, b) => a['distance'].compareTo(b['distance']));

        // Ch·ªçn t√†i x·∫ø g·∫ßn nh·∫•t
        Map<String, dynamic> closestDriver = nearbyDrivers.first;
        debugPrint("üéØ T√†i x·∫ø g·∫ßn nh·∫•t: ID: ${closestDriver['id']} | Kho·∫£ng c√°ch: ${closestDriver['distance']} km");
      } else {
        debugPrint("‚ùå Kh√¥ng t√¨m th·∫•y t√†i x·∫ø n√†o trong b√°n k√≠nh $searchRadius km.");
      }

    } catch (e) {
      debugPrint("L·ªói t√¨m t√†i x·∫ø: $e");
    }
  }

  //////////////////////////////////////////////LAYOUT///////////////////////////////////////////////
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Column(
        children: [
          Container(
            padding: EdgeInsets.only(top: 50, left: 16, right: 16, bottom: 20),
            decoration: BoxDecoration(
              gradient: LinearGradient(
                colors: [const Color.fromARGB(255, 233, 134, 42), const Color.fromARGB(255, 243, 192, 24)],
                begin: Alignment.topCenter,
                end: Alignment.bottomCenter,
              ),
            ),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    GestureDetector(
                      onTap: () => Navigator.pop(context),
                      child: Icon(Icons.close, color: backgroundblack, size: 30),
                    ),
                    if (_activeController == _pickupController) // Ch·ªâ hi·ªÉn th·ªã khi ch·ªçn √¥ nh·∫≠p ƒëi·ªÉm ƒë√≥n
                      GestureDetector(
                        onTap: () {
                          debugPrint("Ch·ªçn ƒëi·ªÉm ƒë√≥n tr√™n b·∫£n ƒë·ªì");
                          _openMapPickerPickup();
                        },
                        child: Icon(Icons.map_rounded, color: Colors.black, size: 30),
                      ),
                    if (_activeController == _destinationController) // Ch·ªâ hi·ªÉn th·ªã khi ch·ªçn √¥ nh·∫≠p ƒëi·ªÉm ƒë·∫øn
                      GestureDetector(
                        onTap: () {
                          debugPrint("Ch·ªçn ƒëi·ªÉm ƒë·∫øn tr√™n b·∫£n ƒë·ªì");
                          _openMapPickerDes();
                        },
                        child: Icon(Icons.map_rounded, color: Colors.black, size: 30),
                      ),
                  ],
                ),
                SizedBox(height: 10),
                _buildInputField(
                  controller: _pickupController,
                  hint: "Nh·∫≠p ƒëi·ªÉm ƒë√≥n",
                  icon: Icons.location_on,
                ),
                SizedBox(height: 10),
                _buildInputField(
                  controller: _destinationController,
                  hint: "Nh·∫≠p ƒëi·ªÉm ƒë·∫øn",
                  icon: Icons.flag,
                ),
              ],
            ),
          ),
          // Danh s√°ch g·ª£i √Ω tr·∫£i d√†i ƒë·∫øn cu·ªëi m√†n h√¨nh
          Expanded(child: _buildSuggestionsList()),

          // N√∫t xaÃÅc nh√¢Ã£n h√†nh tr√¨nh
          Padding(
            padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 20), // CƒÉn l·ªÅ tr√°i ph·∫£i 16px
            child: FractionallySizedBox(
              widthFactor: 1, // ƒê·∫£m b·∫£o n√∫t r·ªông theo to√†n b·ªô ph·∫ßn c√≤n l·∫°i
              child: ElevatedButton(
                onPressed: () {
                  if (_pickupController.text.isEmpty || _destinationController.text.isEmpty || pickupLocation == null || destinationLocation == null) {
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(content: Text('Please enter your trip details')),
                  );
                  } else {
                  Navigator.push(
                    context,
                    MaterialPageRoute(
                    builder: (context) => TripConfirmation(
                      pickupAddress: _pickupController.text,
                      destinationAddress: _destinationController.text,
                      pickupLocation: pickupLocation!,
                      destinationLocation: destinationLocation!,
                    ),
                    ),
                  );
                  }
                },
                style: ElevatedButton.styleFrom(
                  backgroundColor: primary,
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(8),
                  ),
                  padding: const EdgeInsets.symmetric(vertical: 14), // T·∫°o chi·ªÅu cao tho·∫£i m√°i cho n√∫t
                ),
                child: const Text(
                  "X√°c nh·∫≠n h√†nh tr√¨nh",
                  style: TextStyle(
                    fontSize: 16,
                    fontWeight: FontWeight.w600,
                    color: Colors.white,
                  ),
                ),
              ),
            ),
          ),
          SizedBox(height: 20),
        ],
      ),
    );
  }

  Widget _buildInputField({
    required TextEditingController controller,
    required String hint,
    required IconData icon,
  }) {
    return TextField(
      controller: controller,
      onTap: () {
        setState(() => _activeController = controller); // X√°c ƒë·ªãnh √¥ ƒëang ch·ªçn
      },
      onChanged: (value) => _getSuggestions(value),
      style: TextStyle(color: Colors.black),
      decoration: InputDecoration(
        prefixIcon: Icon(icon, color: Colors.black),
        hintText: hint,
        hintStyle: TextStyle(color: Colors.grey),
        filled: true,
        fillColor: Colors.white,
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(30),
          borderSide: BorderSide.none,
        ),
      ),
    );
  }

  // H√†m hi·ªán th·ªã danh s√°ch g·ª£i √Ω
  Widget _buildSuggestionsList() {
    return Container(
      color: backgroundblack,
      child: ListView.builder(
        itemCount: _suggestions.length,
        itemBuilder: (context, index) {
          return ListTile(
            leading: Icon(Icons.location_on, color: Colors.white),
            title: Text(
              _suggestions[index]['place_name'],
              style: TextStyle(color: Colors.white, fontWeight: FontWeight.bold),
            ),
            subtitle: Text(
              "Lat: ${_suggestions[index]['latitude']}, Lng: ${_suggestions[index]['longitude']}",
              style: TextStyle(color: Colors.grey),
            ),
            onTap: () {
              if (_activeController != null) {
                _activeController!.text = _suggestions[index]['place_name'];

                // N·∫øu l√† √¥ nh·∫≠p ƒëi·ªÉm ƒë√≥n th√¨ g√°n pickupLocation
                if (_activeController == _pickupController) {
                  pickupLocation = LatLng(
                    _suggestions[index]['latitude'],
                    _suggestions[index]['longitude'],
                  );
                }

                // N·∫øu l√† √¥ nh·∫≠p ƒëi·ªÉm ƒë·∫øn th√¨ g√°n destinationLocation
                if (_activeController == _destinationController) {
                  destinationLocation = LatLng(
                    _suggestions[index]['latitude'],
                    _suggestions[index]['longitude'],
                  );
                }
              }
              setState(() => _suggestions = []);
            },
          );
        },
      ),
    );
  }
}
