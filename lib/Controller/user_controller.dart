import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import 'package:encrypt/encrypt.dart' as encrypt; 

class Usercontroller {
  ////////////////////////////// BI·∫æN C·ª§C B·ªò //////////////////////////////////////
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  static const String secretKey = "12345678901234567890123456789012";
  static const String ivKey = "1234567890123456";
  
////////////////////////////// SUB-FUNCTION //////////////////////////////////////
  String decryptPassword(String encryptedPassword) {
    final key = encrypt.Key.fromUtf8(secretKey);
    final iv = encrypt.IV.fromUtf8(ivKey);
    final encrypter = encrypt.Encrypter(encrypt.AES(key, mode: encrypt.AESMode.cbc));

    try {
      return encrypter.decrypt64(encryptedPassword, iv: iv); // Tr·∫£ v·ªÅ m·∫≠t kh·∫©u g·ªëc
    } catch (e) {
      debugPrint("L·ªói gi·∫£i m√£ m·∫≠t kh·∫©u: $e");
      return ""; // Tr·∫£ v·ªÅ chu·ªói r·ªóng n·∫øu l·ªói
    }
  }

////////////////////////////// CONTROLLER FUNCTION ///////////////////////////////
  //Con_ki·ªÉm tra ƒëƒÉng nh·∫≠p
  Future<bool> login(String phoneNumber, String password) async {
    
    
    try {
      // üîç T√¨m ng∆∞·ªùi d√πng theo s·ªë ƒëi·ªán tho·∫°i
      var querySnapshot = await _firestore
          .collection("USERS")
          .where("user_phone", isEqualTo: phoneNumber)
          .limit(1) // L·∫•y 1 k·∫øt qu·∫£ ƒë·∫ßu ti√™n
          .get();

      if (querySnapshot.docs.isEmpty) {
        debugPrint("Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n v·ªõi s·ªë ƒëi·ªán tho·∫°i n√†y.");
        return false; // Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n
      }

      var userDoc = querySnapshot.docs.first.data();
      String encryptedPassword = userDoc["user_password"]; // L·∫•y m·∫≠t kh·∫©u ƒë√£ m√£ h√≥a

      // üîì Gi·∫£i m√£ m·∫≠t kh·∫©u
      String decryptedPassword = decryptPassword(encryptedPassword);

      // üîç Ki·ªÉm tra m·∫≠t kh·∫©u
      if (decryptedPassword == password) {
        debugPrint("ƒêƒÉng nh·∫≠p th√†nh c√¥ng!");
        return true;
      } else {
        debugPrint("Sai m·∫≠t kh·∫©u!");
        return false;
      }
    } catch (e) {
      debugPrint("L·ªói khi ƒëƒÉng nh·∫≠p: $e");
      return false;
    }
  }
 
  //Con_Ki·ªÉm tra s·ªë ƒëi·ªán tho·∫°i ƒë√£ t·ªìn t·∫†i
  Future<bool> checkExistPhone(String phoneNumber) async {
    try {
      // Truy v·∫•n collection USERS, ki·ªÉm tra c√≥ document n√†o c√≥ field user_phone = phoneNumber kh√¥ng
      var querySnapshot = await _firestore
          .collection("USERS")
          .where("user_phone", isEqualTo: phoneNumber)
          .get();

      return querySnapshot.docs.isNotEmpty; // Tr·∫£ v·ªÅ true n·∫øu c√≥ √≠t nh·∫•t 1 k·∫øt qu·∫£
    } catch (e) {
      debugPrint("L·ªói khi ki·ªÉm tra s·ªë ƒëi·ªán tho·∫°i: $e");
      return false; // Tr·∫£ v·ªÅ false trong tr∆∞·ªùng h·ª£p l·ªói
    }
  }
}
